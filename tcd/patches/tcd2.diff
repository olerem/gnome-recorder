diff -ur gnome-media/tcd/gcddb.c gnome-media/tcd-fix/gcddb.c
--- gnome-media/tcd/gcddb.c	Mon Aug  3 23:18:31 1998
+++ gnome-media/tcd-fix/gcddb.c	Tue Aug  4 14:43:03 1998
@@ -24,11 +24,14 @@
 */
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <gtk/gtk.h>
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <unistd.h>
 #include <errno.h>
+#include <string.h>
+#include <pwd.h>
 #include <linux/cdrom.h>
 
 #include "linux-cdrom.h"
@@ -133,6 +136,8 @@
 	char s[128], qs[800];
 	char tmp[60];
 	FILE *outfile;
+	char *homedir = NULL;
+	struct passwd *pw = NULL;
 	cddb_query_str query;
 
 	strcpy( server.hostname, props.cddb );
@@ -209,7 +214,19 @@
 	gtk_progress_bar_update( GTK_PROGRESS_BAR(pb), 1.0);
 	while(gtk_events_pending()) gtk_main_iteration();
 
-	sprintf( qs, "%s/.tcd/%s", getenv("HOME"),query.discid );
+	homedir = getenv("HOME");
+
+	if (homedir == NULL) {
+		pw = getpwuid(getuid());
+
+		if (pw != NULL)
+			homedir = pw->pw_dir;
+		else /* This should never happen */
+			homedir = "/";
+	}
+
+	g_snprintf( qs, sizeof(qs) - 1, "%s/.tcd/%s", homedir, query.discid );
+
 	outfile = fopen( qs, "w" );
 	if (outfile == NULL)
 	{
diff -ur gnome-media/tcd/gtracked.c gnome-media/tcd-fix/gtracked.c
--- gnome-media/tcd/gtracked.c	Mon Aug  3 23:18:31 1998
+++ gnome-media/tcd-fix/gtracked.c	Tue Aug  4 14:43:29 1998
@@ -1,6 +1,7 @@
 #undef PIXMAPS
 
 #include <gnome.h>
+#include <string.h>
 #include <sys/types.h>
 #include <linux/cdrom.h>
 #include "linux-cdrom.h"
@@ -44,7 +45,7 @@
 	gchar *tmp[4];
 
 	for( i=0; i < 3; i++ )
-		tmp[i] = malloc(255);
+		tmp[i] = g_malloc(255);
 		
 	gtk_clist_freeze(GTK_CLIST(list));
 
diff -ur gnome-media/tcd/linux-cdrom.c gnome-media/tcd-fix/linux-cdrom.c
--- gnome-media/tcd/linux-cdrom.c	Mon Aug  3 23:18:31 1998
+++ gnome-media/tcd-fix/linux-cdrom.c	Tue Aug  4 14:39:18 1998
@@ -38,6 +38,7 @@
 #include <errno.h>
 #include <math.h>
 #include <sys/ioctl.h>
+#include <pwd.h>
 
 #ifdef linux
 # include <linux/cdrom.h>
@@ -67,15 +68,30 @@
 {
 	char tcd_dir[60];
 	char tmp[256];
+	char *homedir = NULL;
 	struct stat fs;
 	struct cdrom_volctrl vol;
+	struct passwd *pw = NULL;
 
 	debug("cdrom.c: tcd_init_disc(%p) top\n", cd );
 	tcd_opencddev( cd, msg_cb );
 
+	homedir = getenv("HOME");
+
+	if (homedir == NULL) {
+		pw = getpwuid(getuid());
+
+		if (pw != NULL)
+			homedir = pw->pw_dir;
+		else /* This should never happen */
+			homedir = "/";
+	}
+
 #ifdef DATABASE_SUPPORT
-	strcpy( tcd_dir, getenv("HOME"));
-	strcat( tcd_dir, "/.tcd/" );
+	strncpy( tcd_dir, homedir, sizeof(tcd_dir) );
+	strncat( tcd_dir, "/.tcd/", sizeof(tcd_dir) );
+	tcd_dir[sizeof(tcd_dir) - 1] = 0;
+
 	if( stat( tcd_dir, &fs ) < 0 ) 
 	{
 		if( errno == ENOENT )
@@ -525,14 +541,29 @@
 	char tmp[DISC_INFO_LEN], *tmp2;
 	char artist[DISC_INFO_LEN], album[DISC_INFO_LEN];
 	char tcd_dir[128];
+	char *homedir = NULL;
+	struct passwd *pw = NULL;
 
 	if( !cd->isplayable )
 		return;
 	
-	strcpy( tcd_dir, getenv("HOME"));
-        strcat( tcd_dir, "/.tcd/" );
+	homedir = getenv("HOME");
+
+	if (homedir == NULL) {
+		pw = getpwuid(getuid());
+
+		if (pw != NULL)
+			homedir = pw->pw_dir;
+		else /* This should never happen */
+			homedir = "/";
+	}
+
+	strncpy( tcd_dir, homedir, sizeof(tcd_dir) );
+    strncat( tcd_dir, "/.tcd/", sizeof(tcd_dir) );
+	tcd_dir[sizeof(tcd_dir) - 1] = 0;
                  
-	sprintf( fn, "%s%08lx", tcd_dir, cd->cddb_id );
+	snprintf( fn, sizeof(fn) - 1, "%s%08lx", tcd_dir, cd->cddb_id );
+
 	fp = fopen(fn, "r");	
 	if( fp != NULL ) // Does the new format exist?
 	{
@@ -611,10 +642,22 @@
 {
 	char fn[60];
 	char home[60];
+	char *homedir = getenv("HOME");
+	struct passwd *pw = NULL;
+
+	if (homedir == NULL) {
+		pw = getpwuid(getuid());
+
+		if (pw != NULL)
+			homedir = pw->pw_dir;
+		else /* This should never happen */
+			homedir = "/";
+	}
+
+	strncpy( home, homedir, sizeof(home) );
+	home[sizeof(home) - 1] = 0;
+	snprintf( fn, sizeof(fn) - 1, "%s/.tcd/%08lx", home, cd->cddb_id );
 
-	strcpy( home, getenv("HOME"));
-	sprintf( fn, "%s/.tcd/%08lx", home, cd->cddb_id );
-	
         if( tcd_writecddb(cd, fn) < 0 )
         {
         	perror( "tcd_writecddb" );
diff -ur gnome-media/tcd/properties.c gnome-media/tcd-fix/properties.c
--- gnome-media/tcd/properties.c	Mon Aug  3 17:45:19 1998
+++ gnome-media/tcd-fix/properties.c	Tue Aug  4 14:44:58 1998
@@ -26,6 +26,7 @@
 */
 
 #include <gnome.h>
+#include <string.h>
 #include "properties.h"
 
 tcd_properties props;
diff -ur gnome-media/tcd/socket.c gnome-media/tcd-fix/socket.c
--- gnome-media/tcd/socket.c	Wed Jun 17 15:38:36 1998
+++ gnome-media/tcd-fix/socket.c	Tue Aug  4 14:39:18 1998
@@ -45,8 +45,6 @@
         struct hostent *he;
         struct sockaddr_in their_addr; /* connector's address information */
         
-        he = malloc( sizeof( struct hostent ) );
-        
         if ((he=gethostbyname(hostname)) == NULL) {  /* get the host info */
         	return -1;
 	}
@@ -59,7 +57,7 @@
         their_addr.sin_addr = *((struct in_addr *)he->h_addr);
         bzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */
         
-        if (connect(sockfd, (struct sockaddr *)&their_addr, \
+        if (connect(sockfd, (struct sockaddr *)&their_addr,
 	  		sizeof(struct sockaddr)) == -1) {
 		return -1;
         }
diff -ur gnome-media/tcd/tcd.c gnome-media/tcd-fix/tcd.c
--- gnome-media/tcd/tcd.c	Wed Jul  1 18:13:42 1998
+++ gnome-media/tcd-fix/tcd.c	Tue Aug  4 14:39:18 1998
@@ -41,6 +41,7 @@
 #include <signal.h>
 #include <math.h>
 #include <time.h>
+#include <pwd.h>
 
 #include <sys/ioctl.h>
 #include <sys/types.h>
@@ -86,6 +87,13 @@
 
 	/* Allocate some memory for the cd structure */
 	cd = malloc(sizeof(cd_struct));
+
+	if (cd == NULL) {
+		endwin();
+		printf("Error: Out of memory.\n");
+		exit(-1);
+	}
+
 	memset( cd, 0, sizeof(cd_struct) );
 	cd->play_method = NORMAL;
 
@@ -100,11 +108,19 @@
 	}
 
 	cd->cdpath = malloc( 50 );
+
+	if (cd->cdpath == NULL) {
+		endwin();
+		printf("Error: Out of memory.\n");
+		exit(-1);
+	}
 	
-        if( argc < 2 )
+	if( argc < 2 )
 		strcpy( cd->cdpath, "/dev/cdrom" );
-	else
-        	strcpy( cd->cdpath, argv[1] );
+	else {
+        strncpy( cd->cdpath, argv[1], 50 );
+		cd->cdpath[49] = 0;
+	}
 		
 	tcd_init_disc(cd, NULL);
 	draw_not_always();
@@ -258,11 +274,27 @@
 				free(cd->cdpath);
 				free(cd);
 				cd = malloc( sizeof(cd_struct) );
-				cd->cdpath = malloc( 50 );	
-			        if( argc < 2 )
+
+				if (cd == NULL) {
+					endwin();
+					printf("Error: Out of memory.\n");
+					exit(-1);
+				}
+
+				cd->cdpath = malloc( 50 );
+
+				if (cd->cdpath == NULL) {
+					endwin();
+					printf("Error: Out of memory.\n");
+					exit(-1);
+				}
+
+				if( argc < 2 )
 					strcpy( cd->cdpath, "/dev/cdrom" );
-				else
-        				strcpy( cd->cdpath, argv[1] );
+				else {
+        			strncpy( cd->cdpath, argv[1], 50 );
+					cd->cdpath[49] = 0;
+				}
 
 				cd->play_method = NORMAL;
 				tcd_init_disc(cd, NULL);
@@ -665,6 +697,8 @@
 	int i,r;
 	char s[80], test[200];
 	FILE *outfile;
+	char *homedir = NULL;
+	struct passwd *pw = NULL;
 	cddb_query_str query;
 	
 	strcpy( server.hostname, "cddb.cddb.com" );
@@ -689,7 +723,19 @@
         sprintf( test, "cddb read %s %s\n", query.categ, query.discid );
  	send( server.socket, test, strlen(test), 0 );
 
-	sprintf( test, "%s/.tcd/%s", getenv("HOME"),query.discid );
+	homedir = getenv("HOME");
+
+	if (homedir == NULL) {
+		pw = getpwuid(getuid());
+
+		if (pw != NULL)
+			homedir = pw->pw_dir;
+		else /* This should never happen */
+			homedir = "/";
+	}
+
+	snprintf( test, sizeof(test) - 1, "%s/.tcd/%s", homedir, query.discid );
+
 	outfile = fopen( test, "w" );
 	if (outfile == NULL)
 	{
